
message(STATUS "==============config ${PROJECT_NAME}====================")

# just debug;release
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)

add_definitions(-DXLOGGER_TAG="mars::${PROJECT_NAME}")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)


if(MSVC)
    # add DEBUG macro .. release has NDEBUG defaultly
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /DDEBUG")

    if(CMAKE_CL_64)
        add_definitions(-D_WIN64 -DWIN64)
    endif()

    add_definitions(-D_WIN32 -DWIN32 -DUNICODE -D_UNICODE -DNOMINMAX -D_LIB)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP /Zc:threadSafeInit-")
    
    # generate pdb file
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
 
    set(CompilerFlags
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE)
        
    foreach(CompilerFlag ${CompilerFlags})
        string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
    endforeach()

else()
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -DDEBUG")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions")
    
endif()
    

if(ANDROID)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic -std=gnu++14")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdata-sections")

elseif(APPLE)

    # for gen xcode project file
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "gnu++14")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")

    # for build
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14 -stdlib=libc++")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -g -gline-tables-only")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -g -gline-tables-only")
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -O0")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")
    
    if (NOT DEFINED ENABLE_BITCODE)
        set(ENABLE_BITCODE TRUE CACHE BOOL "Wheter or not to enable bitcode")
    endif()

    if (ENABLE_BITCODE)
        set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE "YES")
    else()
        set(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE "NO")
    endif()

    set(CMAKE_XCODE_ATTRIBUTE_STRIP_STYLE "all")
    set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET "8.0")
    set(CMAKE_XCODE_ATTRIBUTE_OTHER_LDFLAGS "-ObjC")
    set(CMAKE_XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_DEBUG_INFORMATION_LEVEL[variant=Debug] "default")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_DEBUG_INFORMATION_LEVEL[variant=Release] "line-tables-only")

    if(DEFINED IOS_DEPLOYMENT_TARGET)
        message(STATUS "setting IOS_DEPLOYMENT_TARGET=${IOS_DEPLOYMENT_TARGET}")
        set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET "${IOS_DEPLOYMENT_TARGET}")
    endif()

elseif(UNIX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -ffunction-sections -fdata-sections -Os")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -ffunction-sections -fdata-sections -Os")
endif()
 
macro(BuildWithUnitTest projname sourcefiles)
    set(SRCFILES "${sourcefiles}")
    if (UNITTEST)  
        add_library(${projname}.test STATIC ${SRCFILES})
        install(TARGETS ${projname}.test ARCHIVE DESTINATION ${CMAKE_SYSTEM_NAME}.out)
    else()
        list(FILTER SRCFILES EXCLUDE REGEX ".*_unittest.cc$")
        list(FILTER SRCFILES EXCLUDE REGEX ".*_mock.cc$")
        add_library(${projname} STATIC ${SRCFILES})
        install(TARGETS ${projname} ARCHIVE DESTINATION ${CMAKE_SYSTEM_NAME}.out)
    endif()
endmacro()

macro(SetHeaderPathsFromIncludeDir projname)
    if (NOT UNITTEST)
        get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
        # message(STATUS "CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}")
        set(SELF_INCLUDE_PATHS "")
        foreach(dir ${dirs})
            string(REPLACE "${CMAKE_SOURCE_DIR}/" "$(PROJECT_DIR)/" outvar "${dir}")
            # message(STATUS "dir='${dir} --> ${outvar}'")
            string(APPEND SELF_INCLUDE_PATHS "${outvar} ")
        endforeach()

        # message(STATUS "SELF_INCLUDE_PATHS=${SELF_INCLUDE_PATHS}")

        set_target_properties(${projname} PROPERTIES
            MARS_XCODE_HEADER_PATH "${SELF_INCLUDE_PATHS}"
            MARS_XCODE_SYM_PATH "$(PROJECT_DIR)/$(TARGET_NAME)"
        )    
    endif()
endmacro()

macro(SetXCodeHeaderPaths target)
    if(DEFINED IOS_PLATFORM)
        get_target_property(MARS_XCODE_HEADER_PATH ${target} MARS_XCODE_HEADER_PATH)
        get_target_property(MARS_XCODE_SYM_PATH ${target} MARS_XCODE_SYM_PATH)    
        set_xcode_property(${target} HEADER_SEARCH_PATHS "${MARS_XCODE_HEADER_PATH}" All)
        set_xcode_property(${target} SYMROOT "${MARS_XCODE_SYM_PATH}" All)
    endif()
endmacro()